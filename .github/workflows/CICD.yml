name: CICD

on:
  push:
    branches: [ "main" ]
  # pull_request:
    # branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
            echo ${{secrets.APPLICATION_SECRET}} | base64 --decode > ./src/main/resources/application-secret.properties
            chmod +x ./gradlew
            ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/godlife_server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/godlife_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.GODLIFE_SERVER_IP }}/api/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.GODLIFE_SERVER_IP }}/api/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=9090" >> $GITHUB_ENV
            echo "STOPPED_PORT=9091" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=9091" >> $GITHUB_ENV
            echo "STOPPED_PORT=9090" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
          
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.GODLIFE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/godlife_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Insert mariadb triggers
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.GODLIFE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            TARGET_UPSTREAM=${{ env.TARGET_UPSTREAM }}
            echo "신규 업스트림: $TARGET_UPSTREAM"
            echo "마리아DB 컨테이너 상태 확인 중..."
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^mariadb$'; then
              if sudo docker ps -a --format '{{.Names}}' | grep -q "^$TARGET_UPSTREAM$"; then
                # mariadb와 CURRENT_UPSTREAM 컨테이너 생성 시각 (timestamp로 변환)
                MARIADB_CREATED=$(sudo docker inspect -f '{{.Created}}' mariadb)
                UPSTREAM_CREATED=$(sudo docker inspect -f '{{.Created}}' "$TARGET_UPSTREAM")
            
                # UTC ISO 형식을 UNIX timestamp로 변환
                MARIADB_TS=$(date -d "$MARIADB_CREATED" +%s)
                UPSTREAM_TS=$(date -d "$UPSTREAM_CREATED" +%s)
            
                # 시간차 계산 (초 단위)
                DIFF=$((UPSTREAM_TS - MARIADB_TS))
            
                if [ "$DIFF" -ge 0 ] && [ "$DIFF" -le 10 ]; then
                  echo "✅ Spring 컨테이너보다 10초 이내에 생성된 mariadb → 트리거 스크립트 실행"
                  bash /home/ubuntu/mariadb_init/init-trigger-push/run-triggers.sh
                else
                  echo "⏩ mariadb가 너무 오래 전에 생성됨 → 트리거 스킵"
                fi
              else
                echo "❌ $TARGET_UPSTREAM 컨테이너가 존재하지 않음"
              fi
            else
              echo "⚠️ mariadb 컨테이너가 존재하지 않음 → 트리거 스킵"
            fi
      
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.GODLIFE_SERVER_IP }}:${{env.STOPPED_PORT}}/api/env
          max-attempts: 5
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.GODLIFE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.GODLIFE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
